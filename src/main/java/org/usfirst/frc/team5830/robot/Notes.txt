to have more than one pcm:

private DoubleSolenoid _solenoid1;
private DoubleSolenoid _solenoid2;
_solenoid1 = new DoubleSolenoid([CAN Address of PCM #1], [Port on PCM #1] ,[Port on PCM #1]);
_solenoid2 = new DoubleSolenoid([CAN Address of PCM #2], [Port on PCM #2], [port on PCM #2]);



Pixy 2 Line Alignment Pseudo Code

var error = 10

if (Math.abs(x1 - x2) > error{
    
    while x1 < x2{
        swing tail left
    }

    while x1 > x2{
        swing tail right
    }

} else {
    return Aligned
}


    			//Listens for controller POV/D-pad movements, calls rotate commands based on them. Case numbers are POV/D-pad angles
    			/*switch (Robot.povPosition) {
    				case 0: 
    					Robot.rotateTo0.start();
    					break;
    				case 45:
    					Robot.rotateTo45.start();
    					break;
    				case 90:
    					Robot.rotateTo90.start();
    					break;
    				case 180:
    					Robot.rotateTo180.start();
    					break;
    				case 270:
    					Robot.rotateToNeg90.start();
    					break;
    				case 315:
    					Robot.rotateToNeg45.start();
    					break;
    			}*/

				/*if (SmartDashboard.getBoolean("Cargo", true) && SmartDashboard.getBoolean("Floor", true)){
					Robot.ArmLow.whenPressed(new PickupCargo());
				}
				if (SmartDashboard.getBoolean("Cargo", true) && SmartDashboard.getBoolean("Loading Station", true)){
					Robot.ArmLow.whenPressed(new PickupCargoLS());
				}
				if (SmartDashboard.getBoolean("Panel", true) && SmartDashboard.getBoolean("Loading Station", true)){
					Robot.ArmLow.whenPressed(new PickupHatchPLS());
				}
				if (SmartDashboard.getBoolean("Panel", true) && SmartDashboard.getBoolean("Floor", true)) {
					Robot.ArmLow.whenPressed(new PickupHatchPFloor());
				}
				if (SmartDashboard.getBoolean("Cargo", true) && SmartDashboard.getBoolean("Put Game Piece Low", true)) {
					Robot.ArmLow.whenPressed(new PlaceCargoLow());
				}
				if (SmartDashboard.getBoolean("Cargo", true) && SmartDashboard.getBoolean("Put Game Piece Middle", true)) {
					Robot.ArmMiddle.whenPressed(new PlaceCargoMiddle());
				}
				if (SmartDashboard.getBoolean("Cargo", true) && SmartDashboard.getBoolean("Put Game Piece High", true)) {
					Robot.ArmHigh.whenPressed(new PlaceCargoHigh());
				}
				if (SmartDashboard.getBoolean("Hatch", true) && SmartDashboard.getBoolean("Put Game Piece Low", true)) {
					Robot.ArmLow.whenPressed(new PlaceHatchPLow());
				}
				if (SmartDashboard.getBoolean("Hatch", true) && SmartDashboard.getBoolean("Put Game Piece Middle", true)) {
					Robot.ArmMiddle.whenPressed(new PlaceHatchPMiddle());
				}
				if (SmartDashboard.getBoolean("Hatch", true) && SmartDashboard.getBoolean("Put Game Piece Low", true)) {
					Robot.ArmHigh.whenPressed(new PlaceHatchPHigh());
				}*/